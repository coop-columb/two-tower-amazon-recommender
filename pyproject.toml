[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "two-tower-amazon-recommender"
version = "0.1.0"
description = "Production-ready two-tower recommendation system for Amazon Reviews 2023 dataset"
authors = [{name = "Your Name", email = "your.email@domain.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "tensorflow-macos>=2.15.0; sys_platform == 'darwin'",
    "tensorflow>=2.15.0; sys_platform != 'darwin'",
    "tensorflow-metal>=1.1.0; sys_platform == 'darwin'", 
    "tensorflow-recommenders>=0.7.3",
    "datasets>=2.14.0",
    "huggingface-hub>=0.17.0",
    "transformers>=4.35.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",
    "mlflow>=2.8.0",
    "wandb>=0.16.0",
    "pydantic>=2.4.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "annoy>=1.17.0",
    "faiss-cpu>=1.7.4",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "tqdm>=4.66.0",
    "python-dotenv>=1.0.0",
    "wordcloud>=1.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "types-PyYAML>=1.0.0",
    "pandas-stubs>=2.0.0",
    "types-tqdm>=4.0.0",
    "types-seaborn>=0.12.0",
]

[project.scripts]
train-model = "src.training.train:main"
serve-model = "src.serving.api:main"
evaluate-model = "src.evaluation.evaluate:main"

[tool.black]
line-length = 99
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 99

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports for these third-party libraries
[[tool.mypy.overrides]]
module = "datasets.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "huggingface_hub.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "yaml.*"
ignore_missing_imports = true

[tool.flake8]
max-line-length = 99

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = """
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
"""

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]